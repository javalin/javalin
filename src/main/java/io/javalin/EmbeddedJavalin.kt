package io.javalin

import io.javalin.core.JavalinServlet
import io.javalin.core.util.Util
import org.eclipse.jetty.server.Server
import org.eclipse.jetty.server.session.SessionHandler
import java.util.function.Supplier

/**
 * Use this class instead of [Javalin] to embed Javalin into servlet containers such as Tomcat. Instantiating this class
 * allows you to exclude all Jetty dependencies and tie Javalin to a servlet as follows:
 *
 * ```
 * @WebServlet(urlPatterns = ["/rest/*"], name = "MyFooServlet", asyncSupported = false)  // */
 * class MyFooServlet : HttpServlet() {
 *   val javalin = EmbeddedJavalin()
 *     .get("/rest") { ctx -> ctx.result("Hello!") }
 *     .createServlet()
 *
 *   override fun service(req: HttpServletRequest, resp: HttpServletResponse) {
 *     javalin.service(req, resp)
 *   }
 * }
 * ```
 */
class EmbeddedJavalin : Javalin(null, null) {

    init {
        // to prevent Javalin from from displaying a message that Jetty server hasn't been started (since we're not
        // starting the Jetty server at all)
        Util.noServerHasBeenStarted = false
    }

    override fun createServlet() = JavalinServlet(
        this,
        pathMatcher,
        exceptionMapper,
        errorMapper,
        debugLogging,
        requestLogger,
        dynamicGzipEnabled,
        autogeneratedEtagsEnabled,
        defaultContentType,
        maxRequestCacheBodySize,
        prefer405over404,
        singlePageHandler,
        null
    )

    override fun contextPath(contextPath: String) = notAvailable("contextPath()")
    override fun enableStaticFiles(classpathPath: String) = notAvailable("enableStaticFiles()")
    override fun enableWebJars() = notAvailable("enableWebJars()")
    override fun port() = notAvailable("port()")
    override fun port(port: Int) = notAvailable("port(port)")
    override fun server(server: Supplier<Server>) = notAvailable("server()")
    override fun sessionHandler(sessionHandler: Supplier<SessionHandler>) = notAvailable("sessionHandler()")
    override fun start() = notAvailable("start()")
    override fun stop() = notAvailable("stop()")
    private fun notAvailable(action: String): Nothing = throw RuntimeException("$action is not available in standalone mode")
}
